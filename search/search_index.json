{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What's this?","text":""},{"location":"#sqlite-database-with-fastapi","title":"SQLite database with FastAPI","text":"<p>This is a database i created to store game stats, to be used with the friend finder chat app.</p> <p>I used SQLite for the databse, and Fastapi for the api.</p> <p>The idea behind this was to integrate it with friend finder, to display game stats on user profiles. A big reason for this was to be able to find friends based on what game you had in common, let's say you want to find someone who likes to play minecraft, you would be able to search for other people who play minecraft and add them as a friend.</p>"},{"location":"#what-can-we-do-with-it","title":"What can we do with it?","text":"<p>The database stores a username and an id for each user. It also stores games and gives them a unique id, and each game has playtime in hours.</p> <p>Every user has their own games and their own playtime in each game.</p> <p>My api lets you:</p> <ul> <li>Get information on all users</li> <li>Get information about a specific user</li> <li>Get information about a specific users' games</li> <li>compare the games of 2 specific users and their playtimes<ul> <li>Sort by playtime</li> <li>Sort alphabetically by title</li> </ul> </li> <li>Add new users</li> <li>Add new games to specific users</li> <li>Delete specific users</li> <li>Delete specific games from specific users</li> <li>Delete all games from a specific user</li> </ul>"},{"location":"#what-does-it-not-do","title":"What does it not do?","text":"<p>Something i wanted to do but sadly couldn't figure out was integration with steamapi. Instead of having to manually add your own games and your playtime, the code could just simply fetch everything from steam. I still wanted you to be able to add your own games, in case of games that arent on steam.</p>"},{"location":"#plans-for-the-future","title":"Plans for the future","text":"<p>If we end up expanding on this project I'd really like to add integration with steamapi.</p>"},{"location":"How-to-use/howto/","title":"How to use","text":"<p>/users/: shows all users (user IDs, usernames) <pre><code>[\n  {\n    \"id\": ,\n    \"username\": \"\"\n  },\n  {\n    \"id\": ,\n    \"username\": \"\"\n  }\n]\n</code></pre> /users/{user_id}/: one specific user by ID (user ID, username) The link would look something like this: http://localhost:8000/users/1 <pre><code>[\n  {\n    \"id\": ,\n    \"username\": \"\"\n  }\n]\n</code></pre> /users/{user_id}/games/: specific users games by ID (game ID, game title, playtime) <pre><code>[\n  {\n    \"id\": ,\n    \"title\": \"\",\n    \"playtime\": \n  }\n]\n</code></pre> /common_games/{user_id_1}/{user_id_2}/: compare games both users have, if there are no games in common \"No common games found.\" (game title, user ID, playtime) <pre><code>[\n  {\n    \"title\": \"\",\n    \"user1_id\": ,\n    \"user1_playtime\": ,\n    \"user2_id\": ,\n    \"user2_playtime\": \n  }\n]\n</code></pre></p>"},{"location":"How-to-use/howto/#sorting","title":"sorting","text":"<p>?sort_by=playtime: sorts games by playtime (descending)</p> <p>?sort_by=title: sorts games alphabetically (also by capilization)</p>"},{"location":"How-to-use/howto/#creating-and-deleting-users-and-games","title":"creating and deleting users and games","text":"<p>add_user.py: put in a username in the double quotes, you should get a response: <code>\"User created successfully:\"</code> or an error code</p> <p>add_game.py: specify by ID what user the game will be added to, specify title and playtime, you should get a response: <code>\"Game added successfully:\"</code> or an error code</p> <p>remove_user.py: specify user ID and run, you should get a response: <code>\"User deleted successfully:\"</code> or <code>\"Failed to delete user:\"</code> (usually fails if user does not exist)</p> <p>remove_game.py: specify user ID and game ID and run, you should get a response: <code>\"Game deleted successfully:\"</code> or <code>\"Failed to delete game:\"</code> (usually fails is user/game does not exist)</p>"},{"location":"setup/installation/","title":"Installation","text":"<p>Everything to need to run this is in requirements.txt</p> <p>How to install everything in the requirements.txt</p> run in terminal<pre><code>python pip install-r requirements.txt\n</code></pre>"},{"location":"setup/run/","title":"to start the server","text":"run in terminal<pre><code>uvicorn main:app --reload\n</code></pre> <p>By default the server is at http://127.0.0.1:8000 This is the same as http://localhost:8000</p>"}]}